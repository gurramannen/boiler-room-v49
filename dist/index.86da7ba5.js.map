{"mappings":"AAAA,YAAY;AAEZ,MAAM,SAAgB;AAStB,sBAAsB;AACtB,MAAM,SAAiB;IACnB;QAAE,MAAM;QAAY,KAAK;QAAS,MAAM;IAAQ;IAChD;QAAE,MAAM;QAAS,KAAK;QAAS,MAAM;IAAQ;IAC7C;QAAE,MAAM;QAAa,KAAK;QAAS,MAAM;IAAQ;IACjD;QAAE,MAAM;QAAc,KAAK;QAAS,MAAM;IAAQ;IAClD;QAAE,MAAM;QAAQ,KAAK;QAAS,MAAM;IAAQ;IAC5C;QAAE,MAAM;QAAe,KAAK;QAAS,MAAM;IAAQ;IACnD;QAAE,MAAM;QAAa,KAAK;QAAS,MAAM;IAAQ;CACpD;AAQD,wCAAwC;AACxC,IAAI,oBAAyC,EAAE;AAE/C,IAAI,eAA4B,SAAS,cAAc,CAAC;AACxD,IAAI,WAAwB,SAAS,cAAc,CAAC;AAEpD,6CAA6C;AAC7C,eAAe,iBAAiB,IAAU;IACtC,MAAM,MAAc,CAAC,oDAAoD,EAAE,KAAK,GAAG,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,OAAO,EAAE,OAAO,qBAAqB,CAAC;IAC3I,IAAI;QACA,MAAM,WAAW,MAAM,MAAM;QAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;YACpD,OAAQ,SAAS,MAAM;gBACnB,KAAK;oBACD,aAAa,WAAW,GAAG;oBAC3B,QAAQ,KAAK,CAAC;oBACd;gBAEJ,KAAK;oBACD,aAAa,WAAW,GAAG;oBAC3B,QAAQ,KAAK,CAAC;oBACd;gBAEJ,KAAK;oBACD,aAAa,WAAW,GAAG;oBAC3B,QAAQ,KAAK,CAAC;oBACd;gBAEJ,KAAK;oBACD,aAAa,WAAW,GAAG;oBAC3B,QAAQ,KAAK,CAAC;oBACd;gBAEJ,KAAK;oBACD,aAAa,WAAW,GAAG;oBAC3B,QAAQ,KAAK,CAAC;oBACd;gBAEJ;oBACI,aAAa,WAAW,GAAG;oBAC3B,QAAQ,KAAK,CAAC,CAAC,kBAAkB,EAAE,SAAS,MAAM,CAAC,EAAE,CAAC;oBACtD;YACR;YACA,OAAO;gBACH,MAAM,KAAK,IAAI;gBACf,aAAa;gBACb,oBAAoB;YACxB;QACJ;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,OAAO;YACH,MAAM,KAAK,IAAI;YACf,aAAa,KAAK,IAAI,CAAC,IAAI;YAC3B,oBAAoB,KAAK,OAAO,CAAC,EAAE,CAAC,WAAW;QACnD;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,CAAC,2BAA2B,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE;QAC1D,OAAO;YACH,MAAM,KAAK,IAAI;YACf,aAAa;YACb,oBAAoB;QACxB;IACJ;AACJ;AAGA,oCAAoC;AACpC,eAAe;IACX,wDAAwD;IACxD,oBAAoB,EAAE;IAEtB,kDAAkD;IAClD,KAAK,MAAM,QAAQ,OAAQ;QACvB,MAAM,cAAc,MAAM,iBAAiB;QAE3C,qDAAqD;QACrD,kBAAkB,IAAI,CAAC;QAEvB,kCAAkC;QAClC,QAAQ,GAAG,CAAC,CAAC,YAAY,EAAE,YAAY,IAAI,CAAC,EAAE,EAAE,YAAY,WAAW,CAAC,OAAI,EAAE,YAAY,kBAAkB,EAAE;IAClH;IAEA,OAAO;AAEP,2DAA2D;AAC/D,sBAAsB,GACtB;AAEA,8CAA8C;AAC9C,wBAAwB,IAAI,CAAC,CAAC;IAC1B,MAAM,iBAAiB,mBAAmB;IAC1C,QAAQ,GAAG,CAAC;IAEZ,OAAO,YAAY;AACvB;AAEA,kDAAkD;AAClD,SAAS,mBAAmB,KAA0B;IAClD,OAAO,MAAM,GAAG,CAAC,CAAC,OAAU,CAAA;YACxB,GAAG,IAAI;YACP,MAAM,AAAC,CAAA;gBACH,OAAQ,KAAK,kBAAkB;oBAC3B,KAAK;wBACD,OAAO;oBACX,KAAK;oBACL,KAAK;wBACD,OAAO;oBACX,KAAK;wBACD,OAAO;oBACX,KAAK;wBACD,OAAO;oBACX,KAAK;wBACD,OAAO;oBACX,KAAK;wBACD,OAAO;oBACX,KAAK;wBACD,OAAO;oBACX,KAAK;wBACD,OAAO;oBACX,KAAK;wBACD,OAAO;oBACX;wBACI,OAAO;gBACf;YACJ,CAAA;QACJ,CAAA;AACJ;AAEA,SAAS,YAAY,KAA0B;IAC3C,MAAM,iBAAiB,SAAS,cAAc,CAAC;IAC/C,IAAI,CAAC,gBAAgB;QACjB,QAAQ,KAAK,CAAC;QACd;IACJ;IAEA,qCAAqC;IACrC,MAAM,OAAO,CAAC,CAAC;QACX,MAAM,OAAoB,SAAS,aAAa,CAAC;QACjD,MAAM,WAA+B,SAAS,aAAa,CAAC;QAC5D,MAAM,UAAgC,SAAS,aAAa,CAAC;QAC7D,MAAM,cAAoC,SAAS,aAAa,CAAC;QAEjE,KAAK,SAAS,CAAC,GAAG,CAAC;QACnB,SAAS,SAAS,CAAC,GAAG,CAAC;QACvB,SAAS,WAAW,GAAG,KAAK,IAAI;QAChC,IAAI,KAAK,IAAI,EAAE;YACX,MAAM,OAA6B,SAAS,aAAa,CAAC;YAC1D,KAAK,SAAS,CAAC,GAAG,CAAC;YACnB,KAAK,WAAW,GAAG,KAAK,IAAI;YAC5B,KAAK,WAAW,CAAC;QACrB;QACA,QAAQ,SAAS,CAAC,GAAG,CAAC;QACtB,QAAQ,WAAW,GAAG,KAAK,kBAAkB;QAC7C,YAAY,SAAS,CAAC,GAAG,CAAC;QAC1B,YAAY,WAAW,GAAG,GAAG,KAAK,WAAW,CAAC,KAAE,CAAC;QAEjD,KAAK,MAAM,CAAC,UAAU,SAAS;QAC/B,eAAe,MAAM,CAAC;IAC1B;AACJ;AAIA,SAAS,mBAAsB,GAAW,EAAE,IAAO;IAC/C,IAAI;QACA,aAAa,OAAO,CAAC,KAAK,KAAK,SAAS,CAAC;IAC7C,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,CAAC,+CAA+C,EAAE,IAAI,CAAC,CAAC,EAAE;IAC5E;AACJ;AAEA,MAAM,eAAoC,mBAAmB,gBAAgB;AAC7E,mBAAmB,gBAAgB,eAAe,qDAAqD;AAGvG,+BAA+B,GAC/B,SAAS,oBAAuB,GAAW;IACvC,IAAI;QACA,MAAM,OAAO,aAAa,OAAO,CAAC;QAClC,OAAO,OAAO,KAAK,KAAK,CAAC,QAAa;IAC1C,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,CAAC,qDAAqD,EAAE,IAAI,CAAC,CAAC,EAAE;QAC9E,OAAO;IACX;AACJ;AAEA,MAAM,wBAAwB,oBAA4B;AAC1D,QAAQ,GAAG,CAAC,wBAAwB,oCAAoC","sources":["src/script.ts"],"sourcesContent":["//? Mockdata\n\nconst apiKey:string = \"f5d21086c0e96fb934d7912aa22ea60e\";\n\ntype City = {\n    name: string,\n    icon?: string\n    lat: number,\n    long: number\n};\n\n// Array of all cities\nconst cities: City[] = [\n    { name: \"Göteborg\", lat: 57.7089, long: 11.9746 },\n    { name: \"Malmö\", lat: 55.6050, long: 13.0038 },\n    { name: \"Linköping\", lat: 58.4109, long: 15.6216 },\n    { name: \"Skellefteå\", lat: 64.7500, long: 20.9500 },\n    { name: \"Umeå\", lat: 63.8258, long: 20.2630 },\n    { name: \"Helsingborg\", lat: 59.3333, long: 18.0667 },\n    { name: \"Stockholm\", lat: 59.3333, long: 18.0667 }\n];\ntype GlobalWeatherData = {\n    name: string,\n    icon?: string,\n    temperature: number,\n    weatherDescription: string\n}\n\n// Global variable to store weather data\nlet globalWeatherData: GlobalWeatherData[] = [];\n\nlet errorMessage: HTMLElement = document.getElementById(\"error-message\")!;\nlet dataList: HTMLElement = document.getElementById(\"data-list\")!;\n\n// Function to fetch data for a specific city\nasync function fetchCityWeather(city: City) {\n    const url: string = `https://api.openweathermap.org/data/2.5/weather?lat=${city.lat}&lon=${city.long}&appid=${apiKey}&units=metric&lang=sv`;\n    try {\n        const response = await fetch(url);\n\n        if (!response.ok) {\n            console.log(`HTTP error! Status: ${response.status}`);\n            switch (response.status) {\n                case 400:\n                    errorMessage.textContent = \"Oops! Something went wrong with your request. An error has been sent to our IT. Please try again later.\";\n                    console.error(\"Invalid request (400). Check your URL.\");\n                    break;\n\n                case 401:\n                    errorMessage.textContent = \"Access denied. An error has been sent to our IT. Please try again later.\";\n                    console.error(\"Unauthorized access (401). Invalid API key.\");\n                    break;\n\n                case 404:\n                    errorMessage.textContent = \"We couldn't find what you're looking for. An error has been sent to our IT. Please try again later.\";\n                    console.error(\"Resource not found (404).\");\n                    break;\n\n                case 429:\n                    errorMessage.textContent = \"You're making too many requests! Please wait a while before trying again.\";\n                    console.error(\"Too many requests (429). Max limit of 1000 searches per day reached.\");\n                    break;\n\n                case 500:\n                    errorMessage.textContent = \"Something went wrong on our end. An error has been sent to our IT. Please try again later.\";\n                    console.error(\"Server error (500). Try again later.\");\n                    break;\n\n                default:\n                    errorMessage.textContent = \"An unexpected error occurred. Please try again.\";\n                    console.error(`Unexpected error (${response.status}).`);\n                    break;\n            }\n            return {\n                name: city.name,\n                temperature: \"N/A\",\n                weatherDescription: \"Error fetching data\"\n            };\n        }\n\n        const data = await response.json();\n\n        return {\n            name: city.name,\n            temperature: data.main.temp,\n            weatherDescription: data.weather[0].description\n        };\n\n    } catch (error) {\n        console.error(`Error fetching weather for ${city.name}:`, error);\n        return {\n            name: city.name,\n            temperature: \"N/A\",\n            weatherDescription: \"Error fetching data\"\n        };\n    }\n}\n\n\n// Fetch weather data for all cities\nasync function fetchAllCitiesWeather() {\n    // Töm globalWeatherData innan vi fyller den med ny data\n    globalWeatherData = [];\n\n    // Loop över alla städer och hämta deras väderdata\n    for (const city of cities) {\n        const cityWeather = await fetchCityWeather(city);\n\n        // Lägg till den hämtade datan till globalWeatherData\n        globalWeatherData.push(cityWeather);\n\n        // Logga för att kontrollera datan\n        console.log(`Weather for ${cityWeather.name}: ${cityWeather.temperature}°C, ${cityWeather.weatherDescription}`);\n    }\n\n    return globalWeatherData;\n\n    // När vi har hämtat vädret för alla städer, visa väderkort\n/*     displayCard(); */\n}\n\n// Kalla på funktionen för att hämta väderdata\nfetchAllCitiesWeather().then((weatherData) => {\n    const cardsWithIcons = assignIconsToCards(weatherData);\n    console.log(cardsWithIcons);\n\n    return displayCard(cardsWithIcons);\n});\n\n// todo: Function to assign icons to array objects\nfunction assignIconsToCards(cards: GlobalWeatherData[]): GlobalWeatherData[] { // todo: Replace placeholder strings with actual\n    return cards.map((card) => ({\n        ...card,\n        icon: (() => {\n            switch (card.weatherDescription) {\n                case 'Regn':\n                    return '🌧️';\n                case 'Sol':\n                case 'Klart':\n                    return '☀️';\n                case 'Molnigt':\n                    return '🌥️';\n                case 'Delvis molnigt':\n                    return '🌤️';\n                case 'Dimma':\n                    return '🌫️';\n                case 'Åska':\n                    return '🌩️';\n                case 'Snö':\n                    return '❄️';\n                case 'Storm':\n                    return '⛈️🌪️';\n                case 'Blåsigt':\n                    return '💨';\n                default:\n                    return '';\n            }\n        })(),\n    }));\n}\n\nfunction displayCard(array: GlobalWeatherData[]): void {\n    const weatherSection = document.getElementById(\"weather-cards\") as HTMLElement | null;\n    if (!weatherSection) {\n        console.error(\"Elementet med id 'weather-cards' hittades inte.\");\n        return;\n    }\n\n    // Loop genom den verkliga väderdatan\n    array.forEach((city) => {\n        const card: HTMLElement = document.createElement(\"article\");\n        const cityName: HTMLHeadingElement = document.createElement(\"h2\");\n        const weather: HTMLParagraphElement = document.createElement(\"p\");\n        const temperature: HTMLParagraphElement = document.createElement(\"p\");\n\n        card.classList.add(\"card\");\n        cityName.classList.add(\"city\");\n        cityName.textContent = city.name;\n        if (city.icon) {\n            const icon: HTMLParagraphElement = document.createElement(\"p\");\n            icon.classList.add(\"icon\");\n            icon.textContent = city.icon;\n            card.appendChild(icon);\n        }\n        weather.classList.add(\"weather\");\n        weather.textContent = city.weatherDescription;\n        temperature.classList.add(\"temperature\");\n        temperature.textContent = `${city.temperature}°C`;\n\n        card.append(cityName, weather, temperature);\n        weatherSection.append(card);\n    });\n}\n\n\n\nfunction saveToLocalStorage<T>(key: string, data: T): void {\n    try {\n        localStorage.setItem(key, JSON.stringify(data));\n    } catch (error) {\n        console.error(`Failed to save data to local storage with key \"${key}\"`, error);\n    }\n}\n\nconst weatherCards: GlobalWeatherData[] = globalWeatherData; //todo add cards\nsaveToLocalStorage('weatherCards', weatherCards); // runs saveToLocalStorage for each card in the array\n\n\n/* Get data from local storage */\nfunction getFromLocalStorage<T>(key: string): T | null {\n    try {\n        const data = localStorage.getItem(key);\n        return data ? JSON.parse(data) as T : null;\n    } catch (error) {\n        console.error(`Failed to retrieve data from local storage with key \"${key}\"`, error);\n        return null;\n    }\n}\n\nconst retrievedWeatherCards = getFromLocalStorage<City[]>('weatherCards');\nconsole.log(retrievedWeatherCards); // This will log your array of cards\n"],"names":[],"version":3,"file":"index.86da7ba5.js.map","sourceRoot":"/__parcel_source_root/"}