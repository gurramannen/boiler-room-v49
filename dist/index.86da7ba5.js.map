{"mappings":"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","sources":["src/script.ts"],"sourcesContent":["const apiKey:string = \"f5d21086c0e96fb934d7912aa22ea60e\";\r\ntype City = {\r\n    name: string,\r\n    icon?: string\r\n    lat: number,\r\n    long: number\r\n};\r\n// Array of all cities\r\nconst cities: City[] = [\r\n    { name: \"Göteborg\", lat: 57.7089, long: 11.9746 },\r\n    { name: \"Malmö\", lat: 55.6050, long: 13.0038 },\r\n    { name: \"Linköping\", lat: 58.4109, long: 15.6216 },\r\n    { name: \"Skellefteå\", lat: 64.7500, long: 20.9500 },\r\n    { name: \"Umeå\", lat: 63.8258, long: 20.2630 },\r\n    { name: \"Helsingborg\", lat: 59.3333, long: 18.0667 },\r\n    { name: \"Stockholm\", lat: 59.3333, long: 18.0667 }\r\n];\r\ntype GlobalWeatherData = {\r\n    name: string,\r\n    icon?: string,\r\n    temperature: number,\r\n    weatherDescription: string,\r\n    weatherMain: string\r\n}\r\n// Global variable to store weather data\r\nlet globalWeatherData: GlobalWeatherData[] = [];\r\nlet errorMessage: HTMLElement = document.getElementById(\"error-message\")!;\r\nlet dataList: HTMLElement = document.getElementById(\"data-list\")!;\r\n// Function to fetch data for a specific city\r\nasync function fetchCityWeather(city: City) {\r\n    const url: string = `https://api.openweathermap.org/data/2.5/weather?lat=${city.lat}&lon=${city.long}&appid=${apiKey}&units=metric&lang=sv`;\r\n    try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n            console.log(`HTTP error! Status: ${response.status}`);\r\n            switch (response.status) {\r\n                case 400:\r\n                    errorMessage.textContent = \"Oops! Something went wrong with your request. An error has been sent to our IT. Please try again later.\";\r\n                    console.error(\"Invalid request (400). Check your URL.\");\r\n                    break;\r\n                case 401:\r\n                    errorMessage.textContent = \"Access denied. An error has been sent to our IT. Please try again later.\";\r\n                    console.error(\"Unauthorized access (401). Invalid API key.\");\r\n                    break;\r\n                case 404:\r\n                    errorMessage.textContent = \"We couldn't find what you're looking for. An error has been sent to our IT. Please try again later.\";\r\n                    console.error(\"Resource not found (404).\");\r\n                    break;\r\n                case 429:\r\n                    errorMessage.textContent = \"You're making too many requests! Please wait a while before trying again.\";\r\n                    console.error(\"Too many requests (429). Max limit of 1000 searches per day reached.\");\r\n                    break;\r\n                case 500:\r\n                    errorMessage.textContent = \"Something went wrong on our end. An error has been sent to our IT. Please try again later.\";\r\n                    console.error(\"Server error (500). Try again later.\");\r\n                    break;\r\n                default:\r\n                    errorMessage.textContent = \"An unexpected error occurred. Please try again.\";\r\n                    console.error(`Unexpected error (${response.status}).`);\r\n                    break;\r\n            }\r\n            return {\r\n                name: city.name,\r\n                temperature: \"N/A\",\r\n                weatherDescription: \"Error fetching data\",\r\n                weatherMain: \":no_entry_sign:\"\r\n            };\r\n        }\r\n        const data = await response.json();\r\n        return {\r\n            name: city.name,\r\n            temperature: data.main.temp,\r\n            weatherDescription: data.weather[0].description,\r\n            weatherMain: data.weather[0].main\r\n        };\r\n    } catch (error) {\r\n        console.error(`Error fetching weather for ${city.name}:`, error);\r\n        return {\r\n            name: city.name,\r\n            temperature: \"N/A\",\r\n            weatherDescription: \"Error fetching data\",\r\n            weatherMain: \":no_entry_sign:\"\r\n        };\r\n    }\r\n}\r\n// Fetch weather data for all cities\r\nasync function fetchAllCitiesWeather() {\r\n    // Töm globalWeatherData innan vi fyller den med ny data\r\n    globalWeatherData = [];\r\n    // Loop över alla städer och hämta deras väderdata\r\n    for (const city of cities) {\r\n        const cityWeather = await fetchCityWeather(city);\r\n        // Lägg till den hämtade datan till globalWeatherData\r\n        globalWeatherData.push(cityWeather);\r\n        // Logga för att kontrollera datan\r\n        console.log(`Weather for ${cityWeather.name}: ${cityWeather.temperature}°C, ${cityWeather.weatherDescription}`);\r\n    }\r\n    return globalWeatherData;\r\n    // När vi har hämtat vädret för alla städer, visa väderkort\r\n/*     displayCard(); */\r\n}\r\n// Kalla på funktionen för att hämta väderdata\r\nfetchAllCitiesWeather().then((weatherData) => {\r\n    const cardsWithIcons = assignIconsToCards(weatherData);\r\n    console.log(cardsWithIcons);\r\n    return displayCard(cardsWithIcons);\r\n});\r\n// todo: Function to assign icons to array objects\r\nfunction assignIconsToCards(cards: GlobalWeatherData[]): GlobalWeatherData[] { // todo: Replace placeholder strings with actual\r\n    return cards.map((card) => ({\r\n        ...card,\r\n        icon: (() => {\r\n            switch (card.weatherMain) {\r\n                case 'Rain':\r\n                    return '🌧️';\r\n                case 'Sun':\r\n                case 'Clear':\r\n                    return '☀️';\r\n                case 'Clouds':\r\n                    return '🌥️';\r\n                case 'Cloudsy':\r\n                    return '🌤️';\r\n                case 'Fog':\r\n                    return '🌫️';\r\n                case 'Thunder':\r\n                    return '🌩️';\r\n                case 'Snow':\r\n                    return '❄️';\r\n                case 'Storm':\r\n                    return '⛈️🌪️';\r\n                case 'Windy':\r\n                    return '💨';\r\n                default:\r\n                    return '';\r\n            }\r\n        })(),\r\n    }));\r\n}\r\nfunction displayCard(array: GlobalWeatherData[]): void {\r\n    const weatherSection = document.getElementById(\"weather-cards\") as HTMLElement | null;\r\n    if (!weatherSection) {\r\n        console.error(\"Elementet med id 'weather-cards' hittades inte.\");\r\n        return;\r\n    }\r\n    // Loop genom den verkliga väderdatan\r\n    array.forEach((city) => {\r\n        const card: HTMLElement = document.createElement(\"article\");\r\n        const cityName: HTMLHeadingElement = document.createElement(\"h2\");\r\n        const weather: HTMLParagraphElement = document.createElement(\"p\");\r\n        const temperature: HTMLParagraphElement = document.createElement(\"p\");\r\n        card.classList.add(\"card\");\r\n        cityName.classList.add(\"city\");\r\n        cityName.textContent = city.name;\r\n        if (city.icon) {\r\n            const icon: HTMLParagraphElement = document.createElement(\"p\");\r\n            icon.classList.add(\"icon\");\r\n            icon.textContent = city.icon;\r\n            card.appendChild(icon);\r\n        }\r\n        weather.classList.add(\"weather\");\r\n        weather.textContent = city.weatherDescription;\r\n        temperature.classList.add(\"temperature\");\r\n        temperature.textContent = `${city.temperature}°C`;\r\n        card.append(cityName, weather, temperature);\r\n        weatherSection.append(card);\r\n    });\r\n}\r\nfunction saveToLocalStorage<T>(key: string, data: T): void {\r\n    try {\r\n        localStorage.setItem(key, JSON.stringify(data));\r\n    } catch (error) {\r\n        console.error(`Failed to save data to local storage with key \"${key}\"`, error);\r\n    }\r\n}\r\nconst weatherCards: GlobalWeatherData[] = globalWeatherData; //todo add cards\r\nsaveToLocalStorage('weatherCards', weatherCards); // runs saveToLocalStorage for each card in the array\r\n/* Get data from local storage */\r\nfunction getFromLocalStorage<T>(key: string): T | null {\r\n    try {\r\n        const data = localStorage.getItem(key);\r\n        return data ? JSON.parse(data) as T : null;\r\n    } catch (error) {\r\n        console.error(`Failed to retrieve data from local storage with key \"${key}\"`, error);\r\n        return null;\r\n    }\r\n}\r\nconst retrievedWeatherCards = getFromLocalStorage<City[]>('weatherCards');\r\nconsole.log(retrievedWeatherCards); // This will log your array of cards"],"names":[],"version":3,"file":"index.86da7ba5.js.map","sourceRoot":"/__parcel_source_root/"}