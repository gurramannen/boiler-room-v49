{"mappings":"AAAA,YAAY;AAOZ,MAAM,cAA8B;IAChC;QACE,MAAM;QACN,oBAAoB;QACpB,YAAY;IACd;IACA;QACE,MAAM;QACN,oBAAoB;QACpB,YAAY;IACd;IACA;QACE,MAAM;QACN,oBAAoB;QACpB,YAAY;IACd;CACD;AACD,iBAAiB;AAEnB,SAAS;IACL,MAAM,iBAAiB,SAAS,cAAc,CAAC;IAC/C,IAAI,CAAC,gBAAgB;QACnB,QAAQ,KAAK,CAAC;QACd;IACF;IAEA,YAAY,OAAO,CAAC,CAAC;QACjB,MAAM,OAAoB,SAAS,aAAa,CAAC;QACjD,MAAM,WAA+B,SAAS,aAAa,CAAC;QAC5D,MAAM,UAAgC,SAAS,aAAa,CAAC;QAC7D,MAAM,cAAoC,SAAS,aAAa,CAAC;QAEjE,KAAK,SAAS,CAAC,GAAG,CAAC;QAEnB,SAAS,SAAS,CAAC,GAAG,CAAC;QACvB,SAAS,WAAW,GAAG,KAAK,IAAI;QAEhC,QAAQ,SAAS,CAAC,GAAG,CAAC;QACtB,QAAQ,WAAW,GAAG,KAAK,kBAAkB;QAE7C,YAAY,SAAS,CAAC,GAAG,CAAC;QAC1B,YAAY,WAAW,GAAG,GAAG,KAAK,UAAU,CAAC,KAAE,CAAC;QAEhD,KAAK,MAAM,CAAC,UAAU,SAAS;QAC/B,eAAe,MAAM,CAAC;IAC1B;AACJ;AAEA;AAYA,iEAAiE;AACjE,MAAM,QAAgB;IAClB;QACI,MAAM;QACN,SAAS;QACT,aAAa;IACjB;IACA;QACI,MAAM;QACN,SAAS;QACT,aAAa;IACjB;CACH;AAGD,SAAS,mBAAsB,GAAW,EAAE,IAAO;IAC/C,IAAI;QACA,aAAa,OAAO,CAAC,KAAK,KAAK,SAAS,CAAC;IAC7C,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,CAAC,+CAA+C,EAAE,IAAI,CAAC,CAAC,EAAE;IAC5E;AACJ;AAEA,MAAM,eAAuB,OAAO,gBAAgB;AACpD,mBAAmB,gBAAgB,eAAe,qDAAqD;AAGvG,+BAA+B,GAC/B,SAAS,oBAAuB,GAAW;IACvC,IAAI;QACA,MAAM,OAAO,aAAa,OAAO,CAAC;QAClC,OAAO,OAAO,KAAK,KAAK,CAAC,QAAa;IAC1C,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,CAAC,qDAAqD,EAAE,IAAI,CAAC,CAAC,EAAE;QAC9E,OAAO;IACX;AACJ;AAEA,MAAM,wBAAwB,oBAA4B;AAC1D,QAAQ,GAAG,CAAC,wBAAwB,oCAAoC;AAIxE,kDAAkD;AAClD,SAAS,mBAAmB,KAAa;IACrC,OAAO,MAAM,GAAG,CAAC,CAAC,OAAU,CAAA;YACxB,GAAG,IAAI;YACP,MAAM,AAAC,CAAA;gBACH,OAAQ,KAAK,OAAO;oBAChB,KAAK;wBACD,OAAO;oBACX,KAAK;oBACL,KAAK;wBACD,OAAO;oBACX,KAAK;wBACD,OAAO;oBACX,KAAK;wBACD,OAAO;oBACX,KAAK;wBACD,OAAO;oBACX,KAAK;oBACL;wBACI,OAAO;gBACf;YACJ,CAAA;QACJ,CAAA;AACJ;AAEA,MAAM,iBAAiB,mBAAmB;AAC1C,QAAQ,GAAG,CAAC","sources":["src/script.ts"],"sourcesContent":["//? Mockdata\ntype CityWeather = {\n    name: string;\n    weatherDescription: string;\n    temperatur: number; \n  };\n\nconst cityWeather : CityWeather[] = [\n    {\n      name: \"Göteborg\",\n      weatherDescription: \"Sol\",\n      temperatur: 18, \n    },\n    {\n      name: \"Malmö\",\n      weatherDescription: \"Molning\",\n      temperatur: 15, \n    },\n    {\n      name: \"Umeå\",\n      weatherDescription: \"Klart\",\n      temperatur: 10, \n    },\n  ];\n  //? mockdata slut\n\nfunction displayCard(): void {\n    const weatherSection = document.getElementById(\"weather-cards\") as HTMLElement | null;\n    if (!weatherSection) {\n      console.error(\"Elementet med id 'weather-cards' hittades inte.\");\n      return;\n    }\n\n    cityWeather.forEach((city) => { \n        const card: HTMLElement = document.createElement(\"article\")\n        const cityName: HTMLHeadingElement = document.createElement(\"h2\");\n        const weather: HTMLParagraphElement = document.createElement(\"p\");\n        const temperature: HTMLParagraphElement = document.createElement(\"p\");\n\n        card.classList.add(\"card\");\n\n        cityName.classList.add(\"city\");\n        cityName.textContent = city.name;\n\n        weather.classList.add(\"weather\");\n        weather.textContent = city.weatherDescription;\n\n        temperature.classList.add(\"temperature\");\n        temperature.textContent = `${city.temperatur}°C`;\n        \n        card.append(cityName, weather, temperature);\n        weatherSection.append(card);\n    });\n}\n\ndisplayCard();\n\n\ntype Card = { //! Card interface type, temporary\n    city: string,\n    icon?: string,\n    weather: string,\n    temperature: string,\n    humidity?: string,\n    wind?: string\n}\n\n// mock-array with weather cards // todo gör så att icon läggs in\nconst cards: Card[] = [\n    {\n        city: 'Göteborg',\n        weather: 'Regn',\n        temperature: '5 °C',\n    },\n    {\n        city: 'Malmö',\n        weather: 'Sol',\n        temperature: '8 °C',\n    }\n]\n\n\nfunction saveToLocalStorage<T>(key: string, data: T): void {\n    try {\n        localStorage.setItem(key, JSON.stringify(data));\n    } catch (error) {\n        console.error(`Failed to save data to local storage with key \"${key}\"`, error);\n    }\n}\n\nconst weatherCards: Card[] = cards; //todo add cards\nsaveToLocalStorage('weatherCards', weatherCards); // runs saveToLocalStorage for each card in the array\n\n\n/* Get data from local storage */\nfunction getFromLocalStorage<T>(key: string): T | null {\n    try {\n        const data = localStorage.getItem(key);\n        return data ? JSON.parse(data) as T : null;\n    } catch (error) {\n        console.error(`Failed to retrieve data from local storage with key \"${key}\"`, error);\n        return null;\n    }\n}\n\nconst retrievedWeatherCards = getFromLocalStorage<Card[]>('weatherCards');\nconsole.log(retrievedWeatherCards); // This will log your array of cards\n\n\n\n// todo: Function to assign icons to array objects\nfunction assignIconsToCards(cards: Card[]): Card[] { // todo: Replace placeholder strings with actual\n    return cards.map((card) => ({\n        ...card,\n        icon: (() => {\n            switch (card.weather) {\n                case 'Regn':\n                    return '🌧️';\n                case 'Sol':\n                case 'Klart':\n                    return '☀️';\n                case 'Moln':\n                    return '🌥️';\n                case 'Delvis molnigt':\n                    return '🌤️';\n                case 'Dimma':\n                    return '🌫️';\n                case 'Storm':\n                default:\n                    return '';\n            }\n        })(),\n    }));\n}\n\nconst cardsWithIcons = assignIconsToCards(cards);\nconsole.log(cardsWithIcons);"],"names":[],"version":3,"file":"index.86da7ba5.js.map","sourceRoot":"/__parcel_source_root/"}